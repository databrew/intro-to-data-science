[["structures-for-data-in-r.html", "Module 10 Structures for data in R Learning goals Tutorial video Types of data structures in R Vectors Review assignment Other Resources", " Module 10 Structures for data in R Learning goals Learn the various structures of data in R How to work with vectors in R. Tutorial video Types of data structures in R Data belong to different classes, as explained above, and they can be arranged into various structures. So far we have been dealing only with variables that contain a single value, but the real value of R comes from assigning entire sets of data to a variable. Vectors The simplest data structure in R is a vector. A vector is simply a set of values. A vector can contain only a single value, as we have been working with thus far, or it can contain many millions of values. Declaring and using vectors To build up a vector in R, use the function c(), which is short for “concatenate”. x &lt;- c(5,6,7,8) x ## [1] 5 6 7 8 You can use the c() function to concatenate two vectors together: x &lt;- c(5,6,7,8) y &lt;- c(9,10,11,12) z &lt;- c(x,y) z ## [1] 5 6 7 8 9 10 11 12 You can also use c() to add values to a vector: x &lt;- c(5,6,7,8) x &lt;- c(x,9) x ## [1] 5 6 7 8 9 When two vectors are of the same length, you can do arithmetic with them: x &lt;- c(5,6,7,8) y &lt;- c(9,10,11,12) x + y ## [1] 14 16 18 20 x - y ## [1] -4 -4 -4 -4 x * y ## [1] 45 60 77 96 x / y ## [1] 0.5555556 0.6000000 0.6363636 0.6666667 You can also put vectors through logical tests: x &lt;- 1:5 4 == x ## [1] FALSE FALSE FALSE TRUE FALSE This command is asking R to tell you whether each element in x is equal to 4. You can create vectors of any data class: x &lt;- c(&quot;Ben&quot;,&quot;Joe&quot;,&quot;Eric&quot;) x ## [1] &quot;Ben&quot; &quot;Joe&quot; &quot;Eric&quot; y &lt;- c(TRUE,TRUE,FALSE) y ## [1] TRUE TRUE FALSE Note that all values within a vector must be of the same class (i.e., data type). You can’t combine numerics and characters into the same vector. If you did, R would try to convert the numbers to characters. For example: x &lt;- 4 y &lt;- &quot;6&quot; z &lt;- c(x,y) z ## [1] &quot;4&quot; &quot;6&quot; 10.0.1 Useful functions for handling vectors length() tells you the number of elements in a vector: x &lt;- c(5,6) y &lt;- c(9,10,11,12) length(x) ## [1] 2 length(y) ## [1] 4 The colon symbol : creates a vector with every integer occurring between a min and max: x &lt;- 1:10 x ## [1] 1 2 3 4 5 6 7 8 9 10 seq() allows you to build a vector using evenly spaced sequence of values between a min and max: seq(0,100,length=11) ## [1] 0 10 20 30 40 50 60 70 80 90 100 In this command, you are telling R to give you a sequence of values from 0 to 100, and you want the length of that vector to be 11. R then figures out the spacing required between each value in order to make that happen. Alternatively, you can prescribe the interval between values instead of the length: seq(0,100,by=7) ## [1] 0 7 14 21 28 35 42 49 56 63 70 77 84 91 98 head() and tail() can be used to retrieve the first 6 or last 6 elements in a vector, respectively. x &lt;- 1:1000 head(x) ## [1] 1 2 3 4 5 6 tail(x) ## [1] 995 996 997 998 999 1000 You can also adjust how many elements to return: head(x,2) ## [1] 1 2 tail(x,10) ## [1] 991 992 993 994 995 996 997 998 999 1000 which() allows you to ask, “For which elements of a vector is the following statement true?” x &lt;- 1:10 which(x==4) ## [1] 4 If no values within the vector meet the condition, a vector of length zero will be returned: x &lt;- 1:10 which(x == 11) ## integer(0) %in% is a handy operator that allows you to ask whether a value occurs within a vector: x &lt;- 1:10 4 %in% x ## [1] TRUE 11 %in% x ## [1] FALSE Exercise 2 NOTE: UNDER CONSTRUCTION! Subsetting vectors Since you will eventually be working with vectors that contain thousands of data points, it will be useful to have some tools for subsetting them – that is, looking at only a few select elements at a time. You can subset a vector using square brackets [ ]. x &lt;- 50:100 x[10] ## [1] 59 This command is asking R to return the 10th element in the vector x. x[10:20] ## [1] 59 60 61 62 63 64 65 66 67 68 69 This command is asking R to return elements 10:20 in the vector x. Exercise 3 A. Figure out how to replicate the head function using your new vector subsetting skills. x[1:6] B. Now replicate the tail() function, using those same skills as well as the length() function you just learned. x[(length(x) - 5) : length(x)] 10.0.2 Dataframes &amp; other data structures A vector is the most basic data structure in R, and the other structures are built out of vectors. As a data scientist, the most common data structure you will be working with is a dataframe, which is essentially a spreadsheet: a dataset with rows and columns, in which each column represents is a vector of the same class of data. We will explore dataframes in detail later, but here is a sneak peak at what they look like: df &lt;- data.frame(x=300:310, y=600:610) df ## x y ## 1 300 600 ## 2 301 601 ## 3 302 602 ## 4 303 603 ## 5 304 604 ## 6 305 605 ## 7 306 606 ## 8 307 607 ## 9 308 608 ## 10 309 609 ## 11 310 610 In this command, we used the data.frame() function to combine two vectors into a dataframe with two columns named x and y. R then saved this result in a new variable named df. When we call df, R shows us the dataframe. The great thing about dataframes is that they allow you to relate different data types to each other. df &lt;- data.frame(name=c(&quot;Ben&quot;,&quot;Joe&quot;,&quot;Eric&quot;), height.inches=c(75,73,80)) df ## name height.inches ## 1 Ben 75 ## 2 Joe 73 ## 3 Eric 80 This dataframe has one column of class character and another of class numeric. The two other most common data structures are matrices and lists, but we will wait on learning about thos. For now, focus on becoming comfortable using vectors and dataframes. Exercise 3 NOTE: UNDER CONSTRUCTION! Review assignment NOTE: UNDER CONSTRUCTION! Other Resources "]]
