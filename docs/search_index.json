[["objects-in-r.html", "Module 9 Objects in R Learning goals Tutorial video Variables in R Types of data in R Types of data structures in R Review assignment Other Resources", " Module 9 Objects in R Learning goals How to define variables and work with them in R Learn the various possible classes of data in R Leaern the various structures of data in R How to work with vectors in R. Tutorial video Variables in R So far we have strictly been using R as a calculator, with commands such as: 3 + 5 ## [1] 8 Of course, R can do much, much more than these basic computations. Your first step in uncovering the potential of R is learning how to use variables. In R, a variable is a convenient way of referring to an underlying value. That value can be as simple as a single number (e.g., 6), or as complex as a spreadsheet that is many Gigabytes in size. It may be useful to think of a variable as a cup; just as cups make it easy to hold your coffee and carry it from the kitchen to the couch, variables make it easy to contain and work with data. Declaring variables To assign numbers or other types of data to a variable, you use the &lt; and - characters to make the arrow symbol &lt;-. x &lt;- 3+5 As the direction of the &lt;- arrow suggests, this command stores the result of 3 + 5 into the variable x. Unlike before, you did not see 8 printed to the Console. That is because the result was stored into x. Calling variables If you wanted R to tell you what “x” is, just type the variable name into the Console and run that command: x ## [1] 8 Want to create a variable but also see its value at the same time? Here’s a handy trick: x &lt;- 3*12 ; x ## [1] 36 The semicolon simulates hitting Enter. It says: first run x &lt;- 3*12, then run x. You can also update variables. x &lt;- x * 3 ; x ## [1] 108 x &lt;- x * 3 ; x ## [1] 324 You can also add variables together. x &lt;- 8 y &lt;- 4.5 x + y ## [1] 12.5 9.0.1 Naming variables Variables are case-sensitive! If you misspell a variable name, you will confuse R and get an error. For example, ask R to tell you the value of capital X. The error message will be Error: object 'X' not found, which means R looked in its memory for an object (i.e., a variable) named X and could not find one. You can make variable names as complicated or simple as you want. supercalifragilistic.expialidocious &lt;- 5 supercalifragilistic.expialidocious # still works ## [1] 5 Note that periods and underscores can be used in variable names: my.variable &lt;- 5 # periods can be used my_variable &lt;- 5 # underscores can be used However, hyphens cannot be used since that symbol is used for subtraction. Naming variables is a bit of an art. The trick is using names that are clear but are not so complicated that typing them is tedious or prone to errors. Some names need to be avoided, since R uses them for special purposes. For example, data should be avoided, as should mean, since both are functions built-in to R and R is liable to interpret them as such instead of as a variable containing your data. Note that R uses a feature called ‘Tab complete’ to help you type variable names. Begin typing a variable name, such as supercalifragilistic.expialidocious from the example above, but after the first few letters press the Tab key. R will then give you options for auto-completing your word. Press Tab again, or Enter, to accept the auto-complete. This is a handy way to avoid typos. Exercise 1 A. Estimate how many bananas you’ve eaten in your lifetime and store that value in a variable (choose whatever name you wish). B. Now estimate how many ice cream sandwiches you’ve eaten in your lifetime and store that in a different variable. C. Now use these variables to calculate your Banana-to-ICS ratio. Store your result in a third variable, then call that variable in the Console to see your ratio. D. Who in the class has the highest ratio? Who has the lowest? Types of data in R So far we have been working exclusively with numeric data. But there are many different data types in R. We call these “types” of data classes: Decimal values like 4.5 are called numeric data. Natural numbers like 4 are called integers. Integers are also numerics. Boolean values (TRUE or FALSE) are called logical data. Text (or string) values are called character data. In order to be combined, data have to be the same class. R is able to compute the following commands … x &lt;- 6 y &lt;- 4 x + y ## [1] 10 … but not these: x &lt;- 6 y &lt;- &quot;4&quot; x + y That’s because the quotation marks used in naming y causes R to interpret y as a character class. To see how R is interpreting variables, you can use the class() function: x &lt;- 100 class(x) ## [1] &quot;numeric&quot; x &lt;- &quot;100&quot; class(x) ## [1] &quot;character&quot; x &lt;- 100 == 101 class(x) ## [1] &quot;logical&quot; Another data type to be aware of is factors, but we will deal with them later. Types of data structures in R Data belong to different classes, as explained above, and they can be arranged into various structures. So far we have been dealing only with variables that contain a single value, but the real value of R comes from assigning entire sets of data to a variable. Vectors The simplest data structure in R is a vector. A vector is simply a set of values. A vector can contain only a single value, as we have been working with thus far, or it can contain many millions of values. Declaring and using vectors To build up a vector in R, use the function c(), which is short for “concatenate”. x &lt;- c(5,6,7,8) x ## [1] 5 6 7 8 You can use the c() function to concatenate two vectors together: x &lt;- c(5,6,7,8) y &lt;- c(9,10,11,12) z &lt;- c(x,y) z ## [1] 5 6 7 8 9 10 11 12 You can also use c() to add values to a vector: x &lt;- c(5,6,7,8) x &lt;- c(x,9) x ## [1] 5 6 7 8 9 When two vectors are of the same length, you can do arithmetic with them: x &lt;- c(5,6,7,8) y &lt;- c(9,10,11,12) x + y ## [1] 14 16 18 20 x - y ## [1] -4 -4 -4 -4 x * y ## [1] 45 60 77 96 x / y ## [1] 0.5555556 0.6000000 0.6363636 0.6666667 You can also put vectors through logical tests: x &lt;- 1:5 4 == x ## [1] FALSE FALSE FALSE TRUE FALSE This command is asking R to tell you whether each element in x is equal to 4. You can create vectors of any data class: x &lt;- c(&quot;Ben&quot;,&quot;Joe&quot;,&quot;Eric&quot;) x ## [1] &quot;Ben&quot; &quot;Joe&quot; &quot;Eric&quot; y &lt;- c(TRUE,TRUE,FALSE) y ## [1] TRUE TRUE FALSE Note that all values within a vector *must be of the same class (i.e., data type). You can’t combine numerics and characters into the same vector. If you did, R would try to convert the numbers to characters. For example: x &lt;- 4 y &lt;- &quot;6&quot; z &lt;- c(x,y) z ## [1] &quot;4&quot; &quot;6&quot; 9.0.1.1 Useful functions for handling vectors length() tells you the number of elements in a vector: x &lt;- c(5,6) y &lt;- c(9,10,11,12) length(x) ## [1] 2 length(y) ## [1] 4 The colon symbol : creates a vector with every integer occurring between a min and max: x &lt;- 1:10 x ## [1] 1 2 3 4 5 6 7 8 9 10 seq() allows you to build a vector using evenly spaced sequence of values between a min and max: seq(0,100,length=11) ## [1] 0 10 20 30 40 50 60 70 80 90 100 In this command, you are telling R to give you a sequence of values from 0 to 100, and you want the length of that vector to be 11. R then figures out the spacing required between each value in order to make that happen. Alternatively, you can prescribe the interval between values instead of the length: seq(0,100,by=7) ## [1] 0 7 14 21 28 35 42 49 56 63 70 77 84 91 98 head() and tail() can be used to retrieve the first 6 or last 6 elements in a vector, respectively. x &lt;- 1:1000 head(x) ## [1] 1 2 3 4 5 6 tail(x) ## [1] 995 996 997 998 999 1000 You can also adjust how many elements to return: head(x,2) ## [1] 1 2 tail(x,10) ## [1] 991 992 993 994 995 996 997 998 999 1000 which() allows you to ask, “For which elements of a vector is the following statement true?” x &lt;- 1:10 which(x==4) ## [1] 4 If no values within the vector meet the condition, a vector of length zero will be returned: x &lt;- 1:10 which(x == 11) ## integer(0) %in% is a handy operator that allows you to ask whether a value occurs within a vector: x &lt;- 1:10 4 %in% x ## [1] TRUE 11 %in% x ## [1] FALSE Exercise 2 NOTE: UNDER CONSTRUCTION! Subsetting vectors Since you will eventually be working with vectors that contain thousands of data points, it will be useful to have some tools for subsetting them – that is, looking at only a few select elements at a time. You can subset a vector using square brackets [ ]. x &lt;- 50:100 x[10] ## [1] 59 This command is asking R to return the 10th element in the vector x. x[10:20] ## [1] 59 60 61 62 63 64 65 66 67 68 69 This command is asking R to return elements 10:20 in the vector x. Exercise 3 A. Figure out how to replicate the head function using your new vector subsetting skills. x[1:6] B. Now replicate the tail() function, using those same skills as well as the length() function you just learned. x[(length(x) - 5) : length(x)] 9.0.2 Other data structures A vector is the most basic data structure in R, and the other structures are built out of vectors. As a data scientist, the most common data structure you will be working with is a dataframe, which is essentially a spreadsheet: a dataset with rows and columns, in which each column represents is a vector of the same class of data. We will explore dataframes in detail later, but here is a sneak peak at what they look like: df &lt;- data.frame(x=300:310, y=600:610) df ## x y ## 1 300 600 ## 2 301 601 ## 3 302 602 ## 4 303 603 ## 5 304 604 ## 6 305 605 ## 7 306 606 ## 8 307 607 ## 9 308 608 ## 10 309 609 ## 11 310 610 In this command, we used the data.frame() function to combine two vectors into a dataframe with two columns named x and y. R then saved this result in a new variable named df. When we call df, R shows us the dataframe. The great thing about dataframes is that they allow you to relate different data types to each other. df &lt;- data.frame(name=c(&quot;Ben&quot;,&quot;Joe&quot;,&quot;Eric&quot;), height.inches=c(75,73,80)) df ## name height.inches ## 1 Ben 75 ## 2 Joe 73 ## 3 Eric 80 This dataframe has one column of class character and another of class numeric. The two other most common data structures are matrices and lists, but we will wait on learning about thos. For now, focus on becoming comfortable using vectors and dataframes. Exercise 3 NOTE: UNDER CONSTRUCTION! Review assignment NOTE: UNDER CONSTRUCTION! Other Resources "]]
